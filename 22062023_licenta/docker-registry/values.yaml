# Default values for docker-registry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1

updateStrategy:
  # type: RollingUpdate
  # rollingUpdate:
  #   maxSurge: 1
  #   maxUnavailable: 0

podAnnotations: {}
podLabels: {}

image:
  repository: registry
  tag: 2.8.1
  pullPolicy: Always
  #imagePullSecrets:
    #- name: regcred
service:
  name: docker-registry-service
  type: NodePort
  # clusterIP:
  port: 5000
  # nodePort:
  # loadBalancerIP:
  # loadBalancerSourceRanges:
  annotations: {}
  # foo.io/bar: "true"
ingress:
  enabled: enabled
  path: /
  #serviceName: registry-service
  #servicePort: 5000
  # service:
  #  name: registry-service
  #  port:
  #   number: 5000
  # Used to create an Ingress record.
  #hosts:
   # - registryrepository.192.168.49.2.nip.io
  annotations: 
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    #cert-manager.io/cluster-issuer: "test-ca-cluster-issuer"
    nginx.ingress.kubernetes.io/proxy-body-size: "3g"
  labels: {}
  #tls:
   #- hosts:
    #  - registryrepository.192.168.49.2.nip.io
    # secretName: dockerregistry-cert
resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
   cpu: 1000m
   memory: 10Gi
  requests:
   cpu: 728m
   memory: 728Mi
persistence:
  accessMode: 'ReadWriteOnce'
  enabled: true
  size: 10Gi
  deleteEnabled: true
  # storageClass: '-'

# set the type of filesystem to use: filesystem, s3
storage: filesystem

# Set this to name of secret for tls certs
#tlsSecretName: my-dockerregistry-cert
secrets:
  haSharedSecret: ""
  htpasswd: ""
# Secrets for Azure
#   azure:
#     accountName: ""
#     accountKey: ""
#     container: ""
# Secrets for S3 access and secret keys
#   s3:
#     accessKey: ""
#     secretKey: ""
# Secrets for Swift username and password
#   swift:
#     username: ""
#     password: ""

# Options for s3 storage type:
# s3:
#  region: us-east-1
#  regionEndpoint: s3.us-east-1.amazonaws.com
#  bucket: my-bucket
#  encrypt: false
#  secure: true

# Options for swift storage type:
# swift:
#  authurl: http://swift.example.com/
#  container: my-container

configData:
  version: 0.1
  log:
    fields:
      service: registry-service
  storage:
    cache:
      blobdescriptor: inmemory
  http:
    addr: :5000
    headers:
      X-Content-Type-Options: [nosniff]
  health:
    storagedriver:
      enabled: true
      interval: 10s
      threshold: 3
  http-snippet: |
   client_max_body_size 3Gi;

securityContext:
  enabled: true
  runAsUser: 1000
  fsGroup: 1000

priorityClassName: ""

podDisruptionBudget: {}
  # maxUnavailable: 1
  # minAvailable: 2

nodeSelector: {}

affinity: {}

tolerations: []

extraVolumeMounts: []
## Additional volumeMounts to the registry container.
#  - mountPath: /-data
#    name: cloudfront-pem-secret
#    readOnly: true

extraVolumes: []
## Additional volumes to the pod.
#  - name: cloudfront-pem-secret
#    secret:
#      secretName: cloudfront-credentials
#      items:
#        - key: cloudfront.pem
#          path: cloudfront.pem
#          mode: 511
nginx:
 clientMaxBodySize: 3g

